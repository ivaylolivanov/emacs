#ifndef SPRITE_COMPONENT
#define SPRITE_COMPONENT

#include "SDL2/SDL.h"
#include "Components.hpp"
#include "../TextureManager.hpp"

class SpriteComponent : public Component
{
private:
    SDL_Rect srcRect;
    SDL_Rect destRect;
    SDL_Texture* texture;
    TransformComponent* transform;


public:
    SpriteComponent() = default;
    SpriteComponent( const char* path ) { setTexture( path ); }
    void setTexture( const char* path ) { this->texture = TextureManager::LoadTexture( path ); }

    ~SpriteComponent() { SDL_DestroyTexture( this->texture ); }

    void init() override {
	this->transform = &entity->getComponent< TransformComponent >();

	srcRect.x = srcRect.y = 0;
	srcRect.w = transform->getWidth();
	srcRect.h = transform->getHeight();
    }

    void update() override {
	destRect.x = static_cast< int >( transform->getXPos() );
	destRect.y = static_cast< int >( transform->getYPos() );

	destRect.w = transform->getWidth() * transform->getScale();
	destRect.h = transform->getHeight() * transform->getScale();
    }
    void draw() override { TextureManager::Draw( texture, srcRect, destRect ); }

};

#endif
