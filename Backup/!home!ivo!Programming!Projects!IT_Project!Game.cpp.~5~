#include "Game.hpp"
#include "TextureManager.hpp"
#include "Map.hpp"
#include "ECSystem/Components.hpp"
#include "Vector2D.hpp"
#include "Collision.hpp"

Map* arenaMap;
Manager manager;

SDL_Renderer* Game::renderer = nullptr;
SDL_Event Game::event;

auto& player( manager.addEntity() );
auto& wall( manager.addEntity() );


Game::Game()
{}

Game::~Game()
{}

void Game::init( const char* title, int windowWidth, int windowHeight, bool fullscreen )
{
    int flags = 0;
    if ( fullscreen )
	flags = SDL_WINDOW_FULLSCREEN;



    if ( SDL_Init( SDL_INIT_EVERYTHING ) == 0 )
    {
	printf( "SDL initialized successfully!\n" );
	window = SDL_CreateWindow( title, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, windowWidth, windowHeight, flags );

	if ( window )
	    printf( "Window successfully created!\n" );

	renderer = SDL_CreateRenderer( window, -1, 0 );
	if ( renderer )
	{
	    printf( "Renderer initialized successfully!\n" );
	    SDL_SetRenderDrawColor( renderer, 200, 200, 200, 255 );
	}

	isActive = true;
    }
    else
	isActive = false;


    arenaMap = new Map();

    player.addComponent< TransformComponent >( 2 );
    player.addComponent< SpriteComponent >( "Assets/BlueMage.png" );
    player.addComponent< KeyboardConstroller >( );
    player.addComponent< ColliderComponent >( "player" );

    wall.addComponent< TransformComponent >( 300.0f, 300.0f, 300, 20, 1 );
    wall.addComponent< SpriteComponent >( "Assets/ground.png" );
    wall.addComponent< ColliderComponent >( "wall" );
}

void Game::handleEvents()
{

    SDL_PollEvent( &event );
    switch ( event.type)
    {
	case SDL_QUIT:
	    isActive = false;
	    break;

	default:
	    break;
    }
}

void Game::update()
{
    manager.refresh();
    manager.update();

    if ( Collision::AABB( player.getComponent< ColliderComponent >().getCollider(),
			  wall.getComponent< ColliderComponent >().getCollider() ) )
    {
	player.getComponent< TransformComponent >().setScale( 1 );
	player.getComponent< TransformComponent >().getVelocity() * -1;
	printf("You have hit a wall\n");
    }

}

void Game::render()
{
    SDL_RenderClear( renderer );

    arenaMap->drawMap();
    manager.draw();

    SDL_RenderPresent( renderer );
}

void Game::clean()
{
    SDL_DestroyWindow( window );
    SDL_DestroyRenderer( renderer );
    SDL_Quit();

    printf( "SDL cleaned!\n" );
}

bool Game::isRunning() { return this->isActive; }
