#include <iostream>
#include "GL/freeglut.h"
#include "terrain.hpp"
#include "GL/glu.h"
#include "avatar.hpp"

void init();
void draw();

void keys(unsigned char key, int x, int y);
void arrows(int key, int x, int y);
void idle();

Terrain ground1 (Point2D(-1.5, -1.5),0.5,12.0, solid, 0.17, 0.34, 0.12);
Terrain ground2 (Point2D(12.5, -1.5),0.5,3.0, solid, 0.17, 0.34, 0.12);
Avatar hero ("Pepo",avatar, Point2D(1.2, 1.0), 0.3, 0.3);

double accelerate=0;
double step=0.045;
double jumpStep=0.01;

int main(int argc, char *argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
	glutInitWindowSize(1024, 768);
	glutCreateWindow("Color Wars");

	init();

	glutDisplayFunc(draw);
	glutKeyboardFunc(keys);
	glutIdleFunc(idle);

	glutMainLoop();
	return 0;
}

void init()
{
	glClearColor(0.32, 0.75, 1, 0.0);
	GLfloat diffuse[]= {0.8, 0.8, 0.8, 1.0};
	GLfloat specular[]={0.0, 0.0, 1.0, 1.0};

	GLfloat lmodel_ambiant[]={0.2, 0.2, 0.2, 1.0};

	glEnable(GL_LIGHTING);
	glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER, GL_TRUE);

	GLfloat pos[] = {5.0, 5.0, 5.0, 0.0};

	glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, specular);
	glLightfv(GL_LIGHT0, GL_POSITION, pos);
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambiant);

	glEnable(GL_LIGHT0);
	glEnable(GL_COLOR_MATERIAL);
	glEnable(GL_AUTO_NORMAL);

	glMatrixMode(GL_PROJECTION);
	gluPerspective(45, 640/480, 0.01, 1000);
}

void draw()
{
	glDrawBuffer(GL_BACK);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(hero.getCoords().getX(), hero.getCoords().getY(), 10, hero.getCoords().getX(), hero.getCoords().getY(), 0, 0, 1, 0);

	glPushMatrix();
	ground1.createTerrainPiece();
	glPopMatrix();

	glPushMatrix();
	ground2.createTerrainPiece();
	glPopMatrix();

	hero.setAvatarColor(1.0, 0, 0);
	glPushMatrix();
	hero.spawn();
	glPopMatrix();

	if(hero.getCoords().getX() < ground1.getBeginning().getX() || (hero.getCoords().getX()>=ground1.getBeginning().getX() && hero.getCoords().getX()<=ground1.getBeginning().getX()+ground1.getWidth()))
		hero.simulateGravity(ground1, accelerate);
	else
		hero.simulateGravity(ground2, accelerate);

	glutSwapBuffers();
}

void keys(unsigned char key, int x, int y)
{
	step=0.045;
	static double jumpDirection=1;

	switch(key)
	{
	case 'a':
		if (accelerate<0.5)
			accelerate+=0.3;

		step=step*(-1);
		hero.move(step, 0, accelerate);
		jumpDirection=-1;
		break;
	case 'd':
		if (accelerate<0.5)
			accelerate+=0.3;
		hero.move(step, 0, accelerate);
		jumpDirection=1;
		break;
		/*case 'k':
		  if(hero.getCanJump()==true)
		  {
		  accelerate+=0.3;
		  double jumpStep=0.01;
		  for (int i = 0; i < 200; i++)
		  {
		  hero.move(0.8*jumpDirection, jumpStep, accelerate);
		  }
		  hero.setCanJump(false);
		  }*/
		break;
	case 'j':
		if(hero.getCanJump()==true)
		{
			if (accelerate<0.5)
				accelerate+=0.3;
			for (int i = 0; i < 200; i++)
			{
				hero.move(0.25*jumpDirection, jumpStep, accelerate);
			}
			hero.setCanJump(false);
		}
		break;

	case 'p':
		std::exit(1);
		break;
	}
}

void idle()
{
	hero.move(step, jumpStep, accelerate);
}
